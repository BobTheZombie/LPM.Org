#!/bin/bash
# lpmbuild script for the LPM package manager

NAME="lpm"
VERSION="1.0.1"
RELEASE="1"
ARCH="x86_64"
SUMMARY="Linux Package Manager with SAT solver, hooks, and .lpmbuild support"
URL="https://github.com/BobTheZombie/LPM"
LICENSE=("MIT")

SOURCE=(
  "https://github.com/BobTheZombie/LPM.Org/archive/refs/tags/${VERSION}.tar.gz"
)

REQUIRES=(
  "python"
  "openssl"
  "tar"
  "gzip"
  "xz"
  "zstd"
  "git"
  "sqlite"
)

SUGGESTS=("python-pyside6")
PROVIDES=("lpm" "lpm-core")
CONFLICTS=()
OBSOLETES=()

prepare() {
    set -euxo pipefail
    cd "$SRCROOT/$NAME-$VERSION"
}

build() {
    set -euxo pipefail
    cd "$SRCROOT/$NAME-$VERSION"

    # âœ… Only install missing Python build dependencies
    PYTHON_DEPS=(pip wheel autocommand nuitka packaging tqdm zstandard)
    for pkg in "${PYTHON_DEPS[@]}"; do
        if ! python3 -m pip show "$pkg" >/dev/null 2>&1; then
            echo "[LPM] Installing missing build dependency: $pkg"
            python3 -m pip install --upgrade "$pkg"
        else
            echo "[LPM] Python package '$pkg' already installed, skipping."
        fi
    done

    # Determine reproducible build date
    local build_date
    if [ -n "${SOURCE_DATE_EPOCH:-}" ]; then
        build_date="$(date -u -d "@${SOURCE_DATE_EPOCH}" +"%Y-%m-%dT%H:%M:%SZ")"
    else
        build_date="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    fi

    make VERSION="${VERSION}" BUILD_DATE="${build_date}" all
    make VERSION="${VERSION}" BUILD_DATE="${build_date}" build/build-info.json
}

staging() {
    set -euxo pipefail
    cd "$SRCROOT/$NAME-$VERSION"

    install -Dm755 build/nuitka/lpm.bin "$pkgdir/usr/bin/lpm"
    install -Dm755 build/nuitka/lpm-ui.bin "$pkgdir/usr/bin/lpm-ui"

    install -Dm644 etc/lpm/lpm.conf "$pkgdir/etc/lpm/lpm.conf"

    if [ -d usr/share ]; then
        mkdir -p "$pkgdir/usr/share"
        cp -a usr/share/lpm "$pkgdir/usr/share/"
        cp -a usr/share/liblpm "$pkgdir/usr/share/"
    fi

    if [ -d usr/libexec ]; then
        mkdir -p "$pkgdir/usr/libexec"
        cp -a usr/libexec/lpm "$pkgdir/usr/libexec/"
    fi

    install -Dm644 README.md "$pkgdir/usr/share/doc/lpm/README.md"
    install -Dm644 docs/TECHNICAL-HOWTO.md "$pkgdir/usr/share/doc/lpm/TECHNICAL-HOWTO.md"
    install -Dm644 LICENSE "$pkgdir/usr/share/licenses/lpm/LICENSE"

    install -d "$pkgdir/var/lib/lpm/cache" "$pkgdir/var/lib/lpm/snapshots"

    printf '[]\n' > "$pkgdir/var/lib/lpm/repos.json"
    cat > "$pkgdir/var/lib/lpm/pins.json" <<'JSON'
{
  "hold": [],
  "prefer": {}
}
JSON

    install -Dm644 build/build-info.json "$pkgdir/usr/share/lpm/build-info.json"

}

