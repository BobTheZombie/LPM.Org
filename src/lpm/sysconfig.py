"""Utilities for provisioning baseline system configuration files.

The helper exposed here is invoked via ``lpm --sysconfig`` and prepares a
minimal but functional set of shell start-up files, console settings, and
user management helpers.  The goal is to provide sensible defaults while
remaining idempotent â€“ existing files with differing content are preserved
and reported back to the caller so administrators can review them manually.
"""

from __future__ import annotations

import os
import shutil
import stat
import subprocess
import textwrap
from dataclasses import dataclass
from pathlib import Path
from typing import Callable, List


@dataclass(frozen=True)
class SysconfigResult:
    """Describe the outcome of provisioning a single file."""

    path: Path
    action: str
    message: str = ""


@dataclass(frozen=True)
class _FileTemplate:
    """Internal helper describing a template written to disk."""

    relative_path: Path
    mode: int
    content: str
    overwrite: bool = False

    def apply(self, root: Path) -> SysconfigResult:
        """Write the template into ``root`` and return the resulting status."""

        target = root / self.relative_path
        try:
            target.parent.mkdir(parents=True, exist_ok=True)
        except OSError as exc:  # pragma: no cover - defensive logging
            return SysconfigResult(target, "error", f"unable to create parent: {exc}")

        existed = target.exists()
        if existed:
            try:
                existing = target.read_text(encoding="utf-8")
            except OSError as exc:
                return SysconfigResult(target, "error", f"unable to read existing file: {exc}")

            normalized_existing = existing.replace("\r\n", "\n")
            normalized_content = self.content.replace("\r\n", "\n")
            if normalized_existing == normalized_content:
                return SysconfigResult(target, "unchanged")

            if not self.overwrite:
                return SysconfigResult(
                    target,
                    "skipped",
                    "existing file with differing content preserved",
                )

        try:
            target.write_text(self.content, encoding="utf-8")
            os.chmod(target, self.mode)
        except OSError as exc:
            return SysconfigResult(target, "error", str(exc))

        return SysconfigResult(target, "updated" if existed else "created")


def _template(content: str) -> str:
    """Return ``content`` with consistent indentation and trailing newline."""

    return textwrap.dedent(content).rstrip() + "\n"


PROFILE_TEMPLATE = _template(
    """
    # /etc/profile generated by lpm --sysconfig
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    if [ -d /etc/profile.d ]; then
        for profile_script in /etc/profile.d/*.sh; do
            if [ -r "${profile_script}" ]; then
                . "${profile_script}"
            fi
        done
    fi
    """
)


PROFILE_D_PATH_TEMPLATE = _template(
    """
    # Ensure /usr/local/sbin is near the front of PATH for interactive shells.
    case :"${PATH}": in
        *:/usr/local/sbin:*) ;;
        *) PATH="/usr/local/sbin:${PATH}" ;;
    esac
    export PATH
    """
)


DIRCOLORS_SNIPPET = _template(
    r"""
    # Set a colourful prompt and enable dircolors if available.
    if command -v dircolors >/dev/null 2>&1; then
        if [ -r /etc/DIR_COLORS ]; then
            eval "$(dircolors -b /etc/DIR_COLORS)"
        else
            eval "$(dircolors -b)"
        fi
    fi

    if [ -n "${PS1:-}" ]; then
        PS1='\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]\$ '
    fi
    """
)


BASHRC_TEMPLATE = _template(
    """
    # /etc/bash.bashrc generated by lpm --sysconfig
    [ -z "${PS1:-}" ] && return

    alias ls='ls --color=auto'
    alias ll='ls -lah'

    if [ -r /etc/profile.d/dircolors.sh ]; then
        . /etc/profile.d/dircolors.sh
    fi
    """
)


SKEL_BASH_PROFILE = _template(
    """
    # ~/.bash_profile generated by lpm --sysconfig
    if [ -f ~/.bashrc ]; then
        . ~/.bashrc
    fi
    """
)


SKEL_BASHRC = _template(
    """
    # ~/.bashrc generated by lpm --sysconfig
    set -o errexit
    set -o pipefail
    set -o noclobber

    if [ -r /etc/bash.bashrc ]; then
        . /etc/bash.bashrc
    fi

    if command -v dircolors >/dev/null 2>&1 && [ -r ~/.dircolors ]; then
        eval "$(dircolors -b ~/.dircolors)"
    fi
    """
)


SKEL_BASH_LOGOUT = _template(
    """
    # ~/.bash_logout generated by lpm --sysconfig
    clear
    """
)


DIR_COLORS = _template(
    """
    # /etc/DIR_COLORS generated by lpm --sysconfig
    # The values are inspired by the GNU dircolors defaults but shortened to
    # keep maintenance lightweight.
    RESET 0
    DIR 01;34
    LINK 01;36
    MULTIHARDLINK 00
    FIFO 40;33
    SOCK 01;35
    DOOR 01;35
    BLK 40;33;01
    CHR 40;33;01
    ORPHAN 40;31;01
    EXEC 01;32
    """
)


VCONSOLE_CONF = _template(
    """
    # /etc/vconsole.conf generated by lpm --sysconfig
    KEYMAP=us
    FONT=Lat2-Terminus16
    FONT_MAP=
    """
)


LOCALE_GEN = _template(
    """
    # /etc/locale.gen generated by lpm --sysconfig
    en_US.UTF-8 UTF-8
    en_US ISO-8859-1
    """
)


LOCALE_CONF = _template(
    """
    # /etc/locale.conf generated by lpm --sysconfig
    LANG=en_US.UTF-8
    LC_CTYPE=en_US.UTF-8
    """
)


USERADD_DEFAULTS = _template(
    """
    # /etc/default/useradd generated by lpm --sysconfig
    GROUP=100
    HOME=/home
    INACTIVE=-1
    EXPIRE=
    SHELL=/bin/bash
    SKEL=/etc/skel
    CREATE_MAIL_SPOOL=no
    """
)


ADDUSER_HELPER = _template(
    """
    #!/bin/sh
    # Wrapper generated by lpm --sysconfig
    exec /usr/sbin/useradd -m -s /bin/bash "$@"
    """
)


DELUSER_HELPER = _template(
    """
    #!/bin/sh
    # Wrapper generated by lpm --sysconfig
    exec /usr/sbin/userdel -r "$@"
    """
)


TEMPLATES: List[_FileTemplate] = [
    _FileTemplate(Path("etc/profile"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, PROFILE_TEMPLATE),
    _FileTemplate(Path("etc/profile.d") / "00-lpm-path.sh", stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, PROFILE_D_PATH_TEMPLATE),
    _FileTemplate(Path("etc/profile.d") / "dircolors.sh", stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, DIRCOLORS_SNIPPET),
    _FileTemplate(Path("etc/bash.bashrc"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, BASHRC_TEMPLATE),
    _FileTemplate(Path("etc/skel/.bash_profile"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, SKEL_BASH_PROFILE),
    _FileTemplate(Path("etc/skel/.bashrc"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, SKEL_BASHRC),
    _FileTemplate(Path("etc/skel/.bash_logout"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, SKEL_BASH_LOGOUT),
    _FileTemplate(Path("etc/DIR_COLORS"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, DIR_COLORS),
    _FileTemplate(Path("etc/vconsole.conf"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, VCONSOLE_CONF),
    _FileTemplate(Path("etc/locale.gen"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, LOCALE_GEN),
    _FileTemplate(Path("etc/locale.conf"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, LOCALE_CONF),
    _FileTemplate(Path("etc/default/useradd"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH, USERADD_DEFAULTS),
    _FileTemplate(Path("usr/local/sbin/adduser"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH, ADDUSER_HELPER),
    _FileTemplate(Path("usr/local/sbin/deluser"), stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH, DELUSER_HELPER),
]


def _generate_locales(root: Path) -> SysconfigResult:
    """Run ``locale-gen`` for ``root`` when the helper is available."""

    archive_path = root / "usr/lib/locale/locale-archive"
    locale_gen = shutil.which("locale-gen")
    if not locale_gen:
        return SysconfigResult(archive_path, "skipped", "locale-gen command not available")

    before_exists = archive_path.exists()
    cmd = [locale_gen]
    if root != Path("/"):
        cmd.append(f"--root={root}")

    try:
        completed = subprocess.run(cmd, check=False, capture_output=True, text=True)
    except OSError as exc:
        return SysconfigResult(archive_path, "skipped", f"unable to execute locale-gen: {exc}")

    if completed.returncode != 0:
        message = completed.stderr.strip() or completed.stdout.strip() or f"locale-gen exited with {completed.returncode}"
        return SysconfigResult(archive_path, "skipped", message)

    action = "updated" if before_exists else "created"
    return SysconfigResult(archive_path, action, "locale archive generated")


def apply_system_configuration(
    root: Path | str = Path("/"), *, _locale_generator: Callable[[Path], SysconfigResult] | None = None
) -> List[SysconfigResult]:
    """Create baseline system configuration files beneath ``root``.

    Parameters
    ----------
    root:
        Filesystem root where configuration files should be generated.

    Returns
    -------
    list of SysconfigResult
        A record for every file template processed.
    """

    root_path = Path(root)
    results: List[SysconfigResult] = []
    for template in TEMPLATES:
        results.append(template.apply(root_path))
    generator = _locale_generator or _generate_locales
    results.append(generator(root_path))
    return results


__all__ = ["SysconfigResult", "apply_system_configuration"]

